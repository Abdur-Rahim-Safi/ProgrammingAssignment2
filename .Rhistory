x<- 1:20
x
x<- 3:20
x
x[2]
x[5]
x
x<- matrix(1:6, 2,3)
x
x[1,2]
x[1, ]
x[,1]
x[ ,1, drop =FALSE]
x[1 ,, drop =FALSE]
source("cachematrix.R")
source("cachematrix.R")
source("cachematrix.R")
source("test.R")
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
source("~/RProgramming/ProgrammingAssignment2/test.R")
inv <<- NULL
source("~/RProgramming/ProgrammingAssignment2/cachematrix.R")
setwd("~/RProgramming/ProgrammingAssignment2")
getwd()
source("~/RProgramming/ProgrammingAssignment2/cachematrix.R")
pmatrix <- cachematrix(matrix(1:16, nrow = 4, ncol = 4))
pmatrix <- cachematrix(matrix(1:16, nrow = 4, ncol = 4))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
source("~/RProgramming/ProgrammingAssignment2/cachematrix.R")
pmatrix <- makeCacheMatrix(matrix(1:16, nrow = 4, ncol = 4))
pmatrix$get()
pmatrix$getinverse()
cacheSolve(pmatrix)
pmatrix <- makeCacheMatrix(matrix(1:4, nrow=2, ncol = 2))
pmatrix$get()
pmatrix$getinverse()
cacheSolve(pmatrix)
cacheSolve(pmatrix)
pmatrix$getinverse()
